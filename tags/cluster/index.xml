<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cluster on FILVIP</title>
    <link>/tags/cluster/</link>
    <description>FILVIP (cluster)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Mar 2019 21:28:34 +0800</lastBuildDate>
    
    <atom:link href="/tags/cluster/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IPFS Cluster 实战 -- 自定义某文件副本数</title>
      <link>/posts/ipfs-cluster-shi-zhan-zi-ding-yi-mou-wen-jian-fu-ben-shu/</link>
      <pubDate>Mon, 25 Mar 2019 21:28:34 +0800</pubDate>
      
      <guid>/posts/ipfs-cluster-shi-zhan-zi-ding-yi-mou-wen-jian-fu-ben-shu/</guid>
      <description>&lt;p&gt;ipfs-cluster-ctl 工具为我们提供了可以自定义某个文件副本数的功能。命令如下所示，该命令将会忽略全局设定的 &lt;code&gt;replication_factor_min&lt;/code&gt; 和 &lt;code&gt;replication_factor_max&lt;/code&gt; 参数，而设定该 CID 所对应内容的副本数为 value。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ipfs-cluster-ctl pin add -r &amp;lt;value&amp;gt; &amp;lt;CID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;实验环境&#34;&gt;实验环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 ipfs-cluster 在华南区配置两个集群。集群 A 包含 south01, south02, south03 这三台机器。集群 B 包含 south04 这一台机器。&lt;/li&gt;
&lt;li&gt;四台机器的配置皆为： 2核 4G内存  5M带宽。&lt;/li&gt;
&lt;li&gt;集群 A 中设置 &lt;code&gt;replication_factor_min&lt;/code&gt; 和 &lt;code&gt;replication_factor_max&lt;/code&gt; 皆为 -1，代表默认情况下所有节点都要存一份副本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实验步骤&#34;&gt;实验步骤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;（1）在 south04 生成大小约为 200M 的内容随机的文件 &lt;code&gt;XzpLGIehps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;（2）在 south04 中执行 &lt;code&gt;ipfs-cluster-ctl add XzpLGIehps&lt;/code&gt;，生成该文件对应的哈希 &lt;code&gt;QmcAZ3SM4UXkAE3rCLiyx8Ui6d5Nrjis5h8siZCarUYQ3i&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;（3）在 south01 中执行 &lt;code&gt;ipfs-cluster-ctl pin add -r 1 QmcAZ3SM4UXkAE3rCLiyx8Ui6d5Nrjis5h8siZCarUYQ3i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;（4）观察 south01, south02, south03 在步骤（3）执行前后 ~/.ipfs/blocks 文件夹的大小变化如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;south01&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;south02&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;south03&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;pin add 之前&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;140K&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;516M&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;20M&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;pin add 之后&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;140K&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;516M&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;223M&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论：&lt;/h2&gt;
&lt;p&gt;集群中只存了一份副本。说明 &lt;code&gt;ipfs-cluster-ctl pin add -r &amp;lt;value&amp;gt; &amp;lt;CID&amp;gt;&lt;/code&gt;  这一命令可以有效覆盖全局设定的 &lt;code&gt;replication_factor_min&lt;/code&gt; 和 &lt;code&gt;replication_factor_max&lt;/code&gt; 参数。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IPFS Cluster 实战 -- 内容存储与回收</title>
      <link>/posts/ipfs-cluster-shi-zhan-cun-chu-yu-hui-shou/</link>
      <pubDate>Mon, 25 Mar 2019 21:20:11 +0800</pubDate>
      
      <guid>/posts/ipfs-cluster-shi-zhan-cun-chu-yu-hui-shou/</guid>
      <description>&lt;h2 id=&#34;实验一-每个节点存储一个副本&#34;&gt;实验一 每个节点存储一个副本&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;准备两个集群：cluster-a(包含，epn-ipfs-011 和 epn-ipfs-012 两个节点), cluster-b (包含 epn-ipfs-014 一个节点)&lt;/li&gt;
&lt;li&gt;cluster-a 和 cluster-b 处于正常运行状态&lt;/li&gt;
&lt;li&gt;~/.ipfs-cluster/service.json 文件中 &lt;code&gt;replication_factor_min&lt;/code&gt; 和 &lt;code&gt;replication_factor_max&lt;/code&gt; 均为默认值 -1&lt;/li&gt;
&lt;li&gt;在 cluster-b 中使用以下命令添加一个大文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;deploy@epn-ipfs-014:~$ ipfs --api /ip4/127.0.0.1/tcp/9095 add movie.tar
added QmQdnBv613cjdXppGjBBHUpeJE2myJiy3CUQSXPrQ2LLWf movie.tar
 557.51 MiB / 557.51 MiB [===============================================] 100.00%
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;在 cluster-a 中的 epn-ipfs-011 机器上进行 &lt;code&gt;pin add&lt;/code&gt; 操作&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;deploy@epn-ipfs-011:~/.ipfs$ ipfs --api /ip4/127.0.0.1/tcp/9095 pin add QmQdnBv613cjdXppGjBBHUpeJE2myJiy3CUQSXPrQ2LLWf
pinned QmQdnBv613cjdXppGjBBHUpeJE2myJiy3CUQSXPrQ2LLWf recursively
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述 &lt;code&gt;pin add&lt;/code&gt; 之后，对比 epn-ipfs-011 和 epn-ipfs-012 两台机器的 ~/.ipfs/blocks 文件夹变化如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;epn-ipfs-011&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;epn-ipfs-012&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;pin add 之前&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;172K&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;160K&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;pin add 之后&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;571M&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;571M&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;结论：集群中每个节点都存了一份文件副本。显然，这不是我们想要的，需要继续实验如何控制副本数。&lt;/p&gt;
&lt;h2 id=&#34;实验二-删除副本回收存储&#34;&gt;实验二 删除副本，回收存储&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;建立在实验一的基础上&lt;/li&gt;
&lt;li&gt;在 epn-ipfs-011 上运行 ipfs &amp;ndash;api /ip4/127.0.0.1/tcp/9095 pin rm QmQdnBv613cjdXppGjBBHUpeJE2myJiy3CUQSXPrQ2LLWf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行上述命令，实际上会让该集群中所有节点都执行了 pin rm 命令。验证：在任意一台上执行  &lt;code&gt;ipfs pin ls | grep QmQdnBv613cjdXppGjBBHUpeJE2myJiy3CUQSXPrQ2LLWf&lt;/code&gt; 结果都为空。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 epn-ipfs-011 上运行 ipfs &amp;ndash;api /ip4/127.0.0.1/tcp/9095 repo gc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行上述命令，发现 epn-ipfs-011 上的 ~/.ipfs/blocks 文件夹中的内容已经被顺利回收。但是 epn-ipfs-012 中的 ~/.ipfs/blocks 文件夹大小不变，仍然为 571M。&lt;/p&gt;
&lt;p&gt;结论：回收操作只能立刻回收运行该命令的机器上的空间，但是无法立即在该集群上所有节点中对该内容占用的空间进行回收。如果要尽快回收所有节点的存储空间，可以有两种做法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（1）配置 ~/.ipfs/config 文件中的 gc 策略，加快回收速度&lt;/li&gt;
&lt;li&gt;（2）设立一个中心，让拥有该内容的每个集群节点都执行一次 GC，这样可以立即回收对应存储空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实验三-控制副本数&#34;&gt;实验三 控制副本数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 epn-ipfs-014 中运行 add 操作&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;deploy@epn-ipfs-014:~$ ipfs --api /ip4/127.0.0.1/tcp/9095 add newmovie.tar
added QmVgGvMXxmf3aF9Dte7EFY8i3MmQmebFnv2ZcNg7sN3Px4 newmovie.tar
 557.58 MiB / 557.58 MiB [================================================] 100.00%
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改 ~/.ipfs-cluster/service.json 文件中的两个配置项： &lt;code&gt;replication_factor_min&lt;/code&gt; 和 &lt;code&gt;replication_factor_max&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;replication_factor_min  代表存储该文件的集群最小节点数，可以理解为副本数下线，-1 代表全部。本次实验中设置为 1.&lt;/li&gt;
&lt;li&gt;replication_factor_max  代表存储该文件的集群最大阶段属，可以理解为副本数上限，-1 代表全部。本次实验中设置为 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 epn-ipfs-011 中执行 &lt;code&gt;pin add&lt;/code&gt; 操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;deploy@epn-ipfs-014:~$ ipfs --api /ip4/127.0.0.1/tcp/9095 pin add QmVgGvMXxmf3aF9Dte7EFY8i3MmQmebFnv2ZcNg7sN3Px4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述 &lt;code&gt;pin add&lt;/code&gt; 之后，对比 epn-ipfs-011 和 epn-ipfs-012 两台机器的 ~/.ipfs/blocks 文件夹变化如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;epn-ipfs-011&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;epn-ipfs-012&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;pin add 之前&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3.7M&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3.7M&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;pin add 之后&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;571M&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3.7M&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;结论：通过参数(replication_factor_min, replication_factor_max)可以控制副本数。本次实验中控制了副本数为 1.&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cluster.ipfs.io/documentation/composite-clusters/#a-cluster-of-clusters&#34;&gt;Composite clusters&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IPFS Cluster 实战 -- 使用 bootstrap 添加新节点</title>
      <link>/posts/ipfs-cluster-shi-zhan-shi-yong-bootstrap-tian-jia-xin-jie-dian/</link>
      <pubDate>Sat, 23 Mar 2019 22:08:42 +0800</pubDate>
      
      <guid>/posts/ipfs-cluster-shi-zhan-shi-yong-bootstrap-tian-jia-xin-jie-dian/</guid>
      <description>&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;安装并运行 IPFS&lt;/li&gt;
&lt;li&gt;根据操作系统下载预编译好的 ipfs ipfs-cluster-service 和 ipfs-cluster-ctl，本文以 ubuntu 为例&lt;/li&gt;
&lt;li&gt;将可执行文件 ipfs-cluster-service 和 ipfs-cluster-ctl 拷贝到 /usr/local/bin 目录下，使其可以当做全局工具使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是前置准备工作，每一个节点都需要做好这些前置步骤。接下来要进行集群配置。&lt;/p&gt;
&lt;h2 id=&#34;step-0-运行第一个集群节点&#34;&gt;Step 0: 运行第一个集群节点&lt;/h2&gt;
&lt;p&gt;运行 &lt;code&gt;ipfs-cluster-service init&lt;/code&gt; 初始化第一个集群节点配置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你也可以在运行上述命令之前手动生成和配置 CLUSTER_SECRET 变量，如下所示(假设当前是在 node0 机器上)：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;node0 $ export CLUSTER_SECRET=$(od  -vN 32 -An -tx1 /dev/urandom | tr -d &#39; \n&#39;)
node0 $ echo $CLUSTER_SECRET
9a420ec947512b8836d8eb46e1c56fdb746ab8a78015b9821e6b46b38344038f
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;初始化完成后，在 ~/.ipfs-cluster/service.json 文件中有  secret 字段就是该集群的秘钥。其他节点加入集群需要有相同的秘钥。&lt;/p&gt;
&lt;p&gt;接着把这个节点的 cluster daemon 服务启动：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node0&amp;gt; ipfs-cluster-service daemon
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-1-添加新节点到集群&#34;&gt;Step 1: 添加新节点到集群&lt;/h2&gt;
&lt;p&gt;必须确保秘钥和 Step 0 中的秘钥一致：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node1&amp;gt; export CLUSTER_SECRET=&amp;lt;copy from node0&amp;gt;
node1&amp;gt; ipfs-cluster-service init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行上述命令后，就完成了集群配置。接着使用 bootstrap 命令加入集群。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node1&amp;gt; ipfs-cluster-service daemon --bootstrap /ip4/&amp;lt;ip-of-node0&amp;gt;/tcp/9096/ipfs/&amp;lt;cluster-peerid-of-node0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接着运行 ipfs-cluster-ctl peers ls 就可以看到集群中其他节点，示例如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node1 &amp;gt; ipfs-cluster-ctl peers ls
QmYFYwnFUkjFhJcSJJGN72wwedZnpQQ4aNpAtPZt8g5fCd | Sees 1 other peers
  &amp;gt; Addresses:
    - /ip4/127.0.0.1/tcp/10096/ipfs/QmYFYwnFUkjFhJcSJJGN72wwedZnpQQ4aNpAtPZt8g5fCd
    - /ip4/192.168.1.3/tcp/10096/ipfs/QmYFYwnFUkjFhJcSJJGN72wwedZnpQQ4aNpAtPZt8g5fCd
  &amp;gt; IPFS: Qmaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    - /ip4/127.0.0.1/tcp/4001/ipfs/Qmaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    - /ip4/192.168.1.3/tcp/4001/ipfs/Qmaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
QmZjSoXUQgJ9tutP1rXjjNYwTrRM9QPhmD9GHVjbtgWxEn | Sees 1 other peers
  &amp;gt; Addresses:
    - /ip4/127.0.0.1/tcp/9096/ipfs/QmZjSoXUQgJ9tutP1rXjjNYwTrRM9QPhmD9GHVjbtgWxEn
    - /ip4/192.168.1.2/tcp/9096/ipfs/QmZjSoXUQgJ9tutP1rXjjNYwTrRM9QPhmD9GHVjbtgWxEn
  &amp;gt; IPFS: Qmbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    - /ip4/127.0.0.1/tcp/4001/ipfs/Qmbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    - /ip4/192.168.1.2/tcp/4001/ipfs/Qmbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-2-从集群移除节点&#34;&gt;Step 2: 从集群移除节点&lt;/h2&gt;
&lt;p&gt;命令 &lt;code&gt;ipfs-cluster-ctl peers rm &amp;lt;peer_id&amp;gt;&lt;/code&gt; 可以将节点移除，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node0&amp;gt; ipfs-cluster-ctl peers rm QmYFYwnFUkjFhJcSJJGN72wwedZnpQQ4aNpAtPZt8g5fCd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行之后就会断开 node1 的连接并且自动关闭 node1 的 ipfs-cluster-daemon 服务。&lt;/p&gt;
&lt;h2 id=&#34;两种集群启动方式比较&#34;&gt;两种集群启动方式比较&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指标&lt;/th&gt;
&lt;th&gt;方式一：预设置集群节点&lt;/th&gt;
&lt;th&gt;方式二：动态添加新节点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;适用场景&lt;/td&gt;
&lt;td&gt;第一次启动集群，并且清楚知道每个集群节点信息，例如节点的 cluster id 等&lt;/td&gt;
&lt;td&gt;需要添加节点到正在运行的集群之中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;灵活性&lt;/td&gt;
&lt;td&gt;较为笨拙，需要配置 init_peerset, peerstore 等繁琐的信息&lt;/td&gt;
&lt;td&gt;较灵活，可以动态的加入新节点&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cluster.ipfs.io/guides/quickstart/&#34;&gt;https://cluster.ipfs.io/guides/quickstart/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IPFS Cluster 实战 -- 使用预设置添加新节点</title>
      <link>/posts/ipfs-clustershi-tian-jia-jie-dian/</link>
      <pubDate>Fri, 22 Mar 2019 20:13:52 +0800</pubDate>
      
      <guid>/posts/ipfs-clustershi-tian-jia-jie-dian/</guid>
      <description>&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;安装并运行 IPFS&lt;/li&gt;
&lt;li&gt;根据操作系统下载预编译好的 ipfs ipfs-cluster-service 和 ipfs-cluster-ctl，本文以 ubuntu 为例&lt;/li&gt;
&lt;li&gt;将可执行文件 ipfs-cluster-service 和 ipfs-cluster-ctl 拷贝到 /usr/local/bin 目录下，使其可以当做全局工具使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是前置准备工作，每一个节点都需要做好这些前置步骤。接下来要进行集群配置。&lt;/p&gt;
&lt;h2 id=&#34;step-0--设置-cluster_secret-环境变量&#34;&gt;Step 0.  设置 CLUSTER_SECRET 环境变量&lt;/h2&gt;
&lt;p&gt;在机器 node0 上运行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export CLUSTER_SECRET=$(od  -vN 32 -An -tx1 /dev/urandom | tr -d &#39; \n&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;假设得到的 CLUSTER_SECRET 变量值为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;9a420ec947512b8836d8eb46e1c56fdb746ab8a78015b9821e6b46b38344038f&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此后运行 &lt;code&gt;ipfs-cluster-service init&lt;/code&gt;，那么生成的 ~/.ipfs-cluster/service.json 文件中 secret 值即为上述变量值。&lt;/p&gt;
&lt;p&gt;接着在其余机器上运行如下命令，使 secret 保持一致：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export CLUSTER_SECRET=9a420ec947512b8836d8eb46e1c56fdb746ab8a78015b9821e6b46b38344038f

ipfs-cluster-service init
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-1-配置-servicejson-文件中-init_peerset-字段&#34;&gt;Step 1. 配置 service.json 文件中 init_peerset 字段&lt;/h2&gt;
&lt;p&gt;该字段填写的内容是，每个节点的 service.json 文件中的 cluster.id 字段。示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;init_peerset&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;QmeoUFMoWu1erV4XZv3VptTgfU1dHBAzA8zsZZpB9WmVkX&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;QmbsNsnW5vFg9YXmDAfubz8PuAg4SNCKx8q6DUdbKTzEkd&amp;#34;&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;init_peerset 需要包含所有节点的 id。所有节点的该字段值都相同。&lt;/li&gt;
&lt;li&gt;这个 id 指的不是 ipfs id，而是 ipfs-cluster 的id，即 service.json 文件中的 cluster.id。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-2-配置-peerstore-文件&#34;&gt;Step 2. 配置 peerstore 文件&lt;/h2&gt;
&lt;p&gt;peerstore 所处的位置是 ~/.ipfs-cluster/peerstore 。该文件必须包含至少一个其他节点的 multiaddress。示例如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/ip4/192.168.0.14/tcp/9096/ipfs/QmeoUFMoWu1erV4XZv3VptTgfU1dHBAzA8zsZZpB9WmVkX
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-3-启动&#34;&gt;Step 3. 启动&lt;/h2&gt;
&lt;p&gt;在每个节点中运行 &lt;code&gt;ipfs-cluster-service daemon&amp;amp;&lt;/code&gt; ，注意如果原来 ~/.ipfs-cluster/raft 文件夹存在的话，先把该文件夹删除。&lt;/p&gt;
&lt;p&gt;启动过后，稍等片刻，就可以查看集群节点信息：&lt;code&gt;ipfs-cluster-ctl peers ls&lt;/code&gt;。结果示例如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;QmbsNsnW5vFg9YXmDAfubz8PuAg4SNCKx8q6DUdbKTzEkd | epn-ipfs-011 | Sees 1 other peers
  &amp;gt; Addresses:
    - /ip4/127.0.0.1/tcp/9096/ipfs/QmbsNsnW5vFg9YXmDAfubz8PuAg4SNCKx8q6DUdbKTzEkd
    - /ip4/192.168.0.11/tcp/9096/ipfs/QmbsNsnW5vFg9YXmDAfubz8PuAg4SNCKx8q6DUdbKTzEkd
  &amp;gt; IPFS: QmPYLxvP9psgMJq2Dwj1GtDaKYbZrdEzPaLgu7jvHHvCNw
    - /ip4/127.0.0.1/tcp/4001/ipfs/QmPYLxvP9psgMJq2Dwj1GtDaKYbZrdEzPaLgu7jvHHvCNw
    - /ip4/157.255.51.177/tcp/4001/ipfs/QmPYLxvP9psgMJq2Dwj1GtDaKYbZrdEzPaLgu7jvHHvCNw
    - /ip4/192.168.0.11/tcp/4001/ipfs/QmPYLxvP9psgMJq2Dwj1GtDaKYbZrdEzPaLgu7jvHHvCNw
    - /ip6/::1/tcp/4001/ipfs/QmPYLxvP9psgMJq2Dwj1GtDaKYbZrdEzPaLgu7jvHHvCNw
QmeoUFMoWu1erV4XZv3VptTgfU1dHBAzA8zsZZpB9WmVkX | epn-ipfs-012 | Sees 1 other peers
  &amp;gt; Addresses:
    - /ip4/127.0.0.1/tcp/9096/ipfs/QmeoUFMoWu1erV4XZv3VptTgfU1dHBAzA8zsZZpB9WmVkX
    - /ip4/192.168.0.14/tcp/9096/ipfs/QmeoUFMoWu1erV4XZv3VptTgfU1dHBAzA8zsZZpB9WmVkX
  &amp;gt; IPFS: Qme6bkxMVu4cHcncuSy7kB4AvWGZpmNNaDeZXKqf2QGfj5
    - /ip4/127.0.0.1/tcp/4001/ipfs/Qme6bkxMVu4cHcncuSy7kB4AvWGZpmNNaDeZXKqf2QGfj5
    - /ip4/157.255.51.51/tcp/4001/ipfs/Qme6bkxMVu4cHcncuSy7kB4AvWGZpmNNaDeZXKqf2QGfj5
    - /ip4/192.168.0.14/tcp/4001/ipfs/Qme6bkxMVu4cHcncuSy7kB4AvWGZpmNNaDeZXKqf2QGfj5
    - /ip6/::1/tcp/4001/ipfs/Qme6bkxMVu4cHcncuSy7kB4AvWGZpmNNaDeZXKqf2QGfj5
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cluster.ipfs.io/documentation/configuration/#the-peerstore-file&#34;&gt;https://cluster.ipfs.io/documentation/configuration/#the-peerstore-file&lt;/a&gt;
&lt;a href=&#34;https://cluster.ipfs.io/documentation/starting/#starting-multiple-peers-with-a-fixed-peerset&#34;&gt;https://cluster.ipfs.io/documentation/starting/#starting-multiple-peers-with-a-fixed-peerset&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IPFS Cluster 实战 -- 多集群通信</title>
      <link>/posts/ipfs-cluster-shi-zhan-duo-ji-qun-tong-xin/</link>
      <pubDate>Thu, 21 Mar 2019 20:02:45 +0800</pubDate>
      
      <guid>/posts/ipfs-cluster-shi-zhan-duo-ji-qun-tong-xin/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/images/cluster/cluster-of-clusters.png&#34; alt=&#34;cluster-of-clusters&#34;&gt;&lt;/p&gt;
&lt;p&gt;ipfs-cluster-service 提供了对 ipfs 节点的代理功能，使得整个 cluster 可以对外当做一个 ipfs 节点一样来使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代理端口默认开在 9095&lt;/li&gt;
&lt;li&gt;对一部分命令进行了封装，例如：&lt;code&gt;ipfs --api /ip4/127.0.0.1/tcp/9095 add myfile.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于没有进行封装的命令，将会穿透访问到 ipfs 节点本身，例如访问 &lt;code&gt;ipfs --api /ip4/127.0.0.1/tcp/9095 repo gc&lt;/code&gt; 和访问 &lt;code&gt;ipfs repo gc&lt;/code&gt; 效果一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常用命令&#34;&gt;常用命令&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;(1) ipfs --api /ip4/127.0.0.1/tcp/9095 add myfile.txt
    该命令将本地 myfile.txt 的内容添加到本地 IPFS 节点中，并且将文件对应的哈希值添加到集群中。

(2) ipfs --api /ip4/127.0.0.1/tcp/9095 pin add &amp;lt;cid&amp;gt;
    根据 cid 获取网络中对应的内容，写入本地 IPFS 节点，并且将该哈希值添加到集群中。
    
(3) ipfs --api /ip4/127.0.0.1/tcp/9095 pin rm &amp;lt;cid&amp;gt;
    将该 cid 记录从本集群中移除。

(4) ipfs --api /ip4/127.0.0.1/tcp/9095 pin ls 
    显示本集群中所有的 pin 记录。

(5) ipfs repo gc 
    该命令会触发 gc 操作，回收所有 unpin 的内容在 IPFS 节点中所占用的存储空间。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cluster.ipfs.io/documentation/composite-clusters/&#34;&gt;https://cluster.ipfs.io/documentation/composite-clusters/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IPFS Cluster 实战 -- supervisor 托管</title>
      <link>/posts/ipfs-cluster-shi-zhan-supervisor-guan-li-ipfs-cluster-service/</link>
      <pubDate>Thu, 21 Mar 2019 17:05:28 +0800</pubDate>
      
      <guid>/posts/ipfs-cluster-shi-zhan-supervisor-guan-li-ipfs-cluster-service/</guid>
      <description>&lt;p&gt;配置模版：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[program:ipfs-cluster-service]
command=/bin/bash -c &amp;quot;/usr/local/bin/ipfs-cluster-service daemon&amp;quot;
environment=HOME=&amp;quot;/home/deploy&amp;quot;,USER=&amp;quot;deploy&amp;quot;
user=deploy
process_name=%(program_name)s ; process_name expr (default %(program_name)s)
numprocs=1                    ; number of processes copies to start (def 1)
startsecs=1                   ; number of secs prog must stay running (def. 1)
startretries=3                ; max # of serial start failures (default 3)
user=deploy                     ; setuid to this UNIX account to run the program
redirect_stderr=true          ; redirect proc stderr to stdout (default false)
stdout_logfile=/home/deploy/logs/ipfs-cluster-service.stdout.log
stdout_logfile_maxbytes=50MB  ; max # logfile bytes b4 rotation (default 50MB)
stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)
stdout_capture_maxbytes=1MB   ; number of bytes in &#39;capturemode&#39; (default 0)
stdout_events_enabled=false   ; emit events on stdout writes (default false)
stderr_logfile=/home/deploy/logs/ipfs-cluster-service.stderr.log
stderr_logfile_maxbytes=10MB  ; max # logfile bytes b4 rotation (default 50MB)
stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)
stderr_capture_maxbytes=1MB   ; number of bytes in &#39;capturemode&#39; (default 0)
stderr_events_enabled=false   ; emit events on stderr writes (default false)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个&lt;a href=&#34;https://github.com/ipfs/go-ipfs/issues/861&#34;&gt;提问&lt;/a&gt; 解释了为什么需要这样配置 command 和 environment。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IPFS Cluster 实战 -- 概览</title>
      <link>/posts/ipfs-cluster-shi-zhan-gai-lan/</link>
      <pubDate>Wed, 20 Mar 2019 20:58:44 +0800</pubDate>
      
      <guid>/posts/ipfs-cluster-shi-zhan-gai-lan/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;IPFS Cluster 是 IPFS 集群的编排工具。&lt;/li&gt;
&lt;li&gt;一个 IPFS 节点对应一个 IPFS Cluster 的 peer。&lt;/li&gt;
&lt;li&gt;IPFS Cluster peers 采用 libp2p 进行通信，与 IPFS 类似。&lt;/li&gt;
&lt;li&gt;同一个 IPFS Cluster 的节点需要确保 Secret 一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/images/cluster/cluster-overview.png&#34; alt=&#34;overview&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;已有特性&#34;&gt;已有特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;多节点之间内容的复制，pin，add 操作。&lt;/li&gt;
&lt;li&gt;从多节点中获取内容&lt;/li&gt;
&lt;li&gt;采用基于 Raft 的共识&lt;/li&gt;
&lt;li&gt;控制副本数的上限和下限&lt;/li&gt;
&lt;li&gt;某个 pin 操作失败后，会自动重试&lt;/li&gt;
&lt;li&gt;节点存储负载均衡&lt;/li&gt;
&lt;li&gt;集群数据的导入和导出 （Pin-set exports and imports）&lt;/li&gt;
&lt;li&gt;集群节点动态添加和移除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cluster.ipfs.io/documentation/overview/&#34;&gt;https://cluster.ipfs.io/documentation/overview/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>